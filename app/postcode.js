/* Generated by Opal 0.9.2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$include', '$attr_reader', '$delete', '$upcase', '$[]', '$==', '$numbers', '$<=>', '$letters']);
  return (function($base, $super) {
    function $Postcode(){};
    var self = $Postcode = $klass($base, $super, 'Postcode', $Postcode);

    var def = self.$$proto, $scope = self.$$scope;

    def.postcode = nil;
    self.$include($scope.get('Comparable'));

    self.$attr_reader("numbers", "letters");

    Opal.defn(self, '$initialize', function(postcode) {
      var self = this;

      self.postcode = postcode.$upcase().$delete(" ");
      self.numbers = self.postcode['$[]']($range(0, 3, false));
      return self.letters = self.postcode['$[]']($range(4, 5, false));
    });

    return (Opal.defn(self, '$<=>', function(other) {
      var $a, self = this;

      if ((($a = (self.$numbers()['$=='](other.$numbers()))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$letters()['$<=>'](other.$letters())
        } else {
        return self.$numbers()['$<=>'](other.$numbers())
      };
    }), nil) && '<=>';
  })($scope.base, null)
})(Opal);
