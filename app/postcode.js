/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$attr_reader', '$delete', '$upcase', '$[]', '$==', '$numbers', '$<=>', '$letters']);
  return (function($base, $super, $parent_nesting) {
    function $Postcode(){};
    var self = $Postcode = $klass($base, $super, 'Postcode', $Postcode);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Postcode_initialize_1, TMP_Postcode_$lt$eq$gt_2;

    def.postcode = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Comparable'));
    self.$attr_reader("numbers", "letters");
    
    Opal.defn(self, '$initialize', TMP_Postcode_initialize_1 = function $$initialize(postcode) {
      var self = this;

      
      self.postcode = postcode.$upcase().$delete(" ");
      self.numbers = self.postcode['$[]']($range(0, 3, false));
      return (self.letters = self.postcode['$[]']($range(4, 5, false)));
    }, TMP_Postcode_initialize_1.$$arity = 1);
    return (Opal.defn(self, '$<=>', TMP_Postcode_$lt$eq$gt_2 = function(other) {
      var self = this;

      if ($truthy(self.$numbers()['$=='](other.$numbers()))) {
        return self.$letters()['$<=>'](other.$letters())
        } else {
        return self.$numbers()['$<=>'](other.$numbers())
      }
    }, TMP_Postcode_$lt$eq$gt_2.$$arity = 1), nil) && '<=>';
  })($nesting[0], null, $nesting)
})(Opal);
